package reports

import (
	"time"

	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

type Report struct {
	TotalEarning int32 `pb:"1" json:"TotalEarning"`
	TotalParked  int32 `pb:"2" json:"TotalParked"`
	TotalHours   int32 `pb:"3" json:"TotalHours"`
}

type ReportData struct {
	Report Report `pb:"1" json:"Reports"`
}

type GetReportRequest struct {
	StartDate time.Time `pb:"1" json:"StartDate"`
	EndDate   time.Time `pb:"2" json:"EndDate"`
}

// UnParkVehicleResponse ...
type GetReportResponse struct {
	Data ReportData `pb:"1" json:"Data"`
}

// ReportService ...
type ReportService interface {
	// GetReports return parking lot report record.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/reports",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Report"},
	//         Description: "Report record.",
	//         Summary:     "Report",
	//         Produces:    []string{"application/json"},
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Ref: "#/definitions/reportsGetReportResponse",
	//                         }},
	//                 },
	//                 "400": openapiv2.Response{
	//                         Description: "Returned when request is incorrect or malformed.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 400, \"message\": \"request is incorrect or malformed\" }",
	//                         }},
	//                 },
	//                 "401": openapiv2.Response{
	//                         Description: "Returned when not authorized to perform this action.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 401, \"message\": \"not authorized\" }",
	//                         }},
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when not found.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 404, \"message\": \"parking data not found\" }",
	//                         }},
	//                 },
	//                 "500": openapiv2.Response{
	//                         Description: "Returned when internal server error.",
	//                         Schema: openapiv2.Schema{JSONSchema: openapiv2.JSONSchema{
	//                                 Example: "{ \"code\": 500, \"message\": \"internal error\" }",
	//                         }},
	//                 },
	//         },
	// }
	GetReport(GetReportRequest) GetReportResponse
}
